var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  DodopaymentsHandler: () => DodopaymentsHandler
});
module.exports = __toCommonJS(index_exports);
var import_standardwebhooks = require("standardwebhooks");
var CustomError = class extends Error {
  constructor({ code = "Dodopayerror", message }) {
    super(message);
    this.name = code;
  }
};
var DodopaymentsHandler = class {
  signing_key;
  webhook;
  constructor(e) {
    this.signing_key = e.signing_key;
    this.webhook = new import_standardwebhooks.Webhook(e.signing_key);
  }
  async handle({
    body,
    headers
  }) {
    if (!body) {
      throw new CustomError({ code: "dodopay_request_missing_data", message: "Missing body field!" });
    }
    if (!headers) {
      throw new CustomError({ code: "dodopay_request_missing_data", message: "Missing headers field!" });
    }
    if (!this.signing_key) {
      throw new CustomError({ code: "dodopay_request_missing_data", message: "Signing Key Is Missing!" });
    }
    if (!headers["webhook-id"] || !headers["webhook-signature"] || !headers["webhook-timestamp"]) {
      throw new CustomError({ code: "dodopay_webhook_missing_headers", message: "Missing key headers in the request!" });
    }
    let stringifiedBody, parsedBody;
    if (typeof body === "string") {
      stringifiedBody = body;
      try {
        parsedBody = JSON.parse(stringifiedBody);
      } catch (err) {
        throw new Error("Failed to parse body!");
      }
    } else {
      parsedBody = body;
      try {
        stringifiedBody = JSON.stringify(parsedBody);
      } catch (err) {
        throw new Error("Failed to stringify body!");
      }
    }
    try {
      const ParsedFinalData = await this.webhook.verify(stringifiedBody, {
        "webhook-id": headers["webhook-id"],
        "webhook-signature": headers["webhook-signature"],
        "webhook-timestamp": headers["webhook-timestamp"]
      });
      return ParsedFinalData;
    } catch (e) {
      if (e.name === "WebhookVerificationError") {
        throw new CustomError({ code: "dodopay_invalid_signature", message: "Invalid signature!" });
      } else {
        throw e;
      }
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DodopaymentsHandler
});
