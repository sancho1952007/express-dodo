// src/index.ts
import { Webhook } from "standardwebhooks";
var CustomError = class extends Error {
  constructor({ code = "Dodopayerror", message }) {
    super(message);
    this.name = code;
  }
};
var DodopaymentsHandler = class {
  signing_key;
  webhook;
  constructor(e) {
    this.signing_key = e.signing_key;
    this.webhook = new Webhook(e.signing_key);
  }
  async handle({
    body,
    headers
  }) {
    if (!body) {
      throw new CustomError({ code: "dodopay_request_missing_data", message: "Missing body field!" });
    }
    if (!headers) {
      throw new CustomError({ code: "dodopay_request_missing_data", message: "Missing headers field!" });
    }
    if (!this.signing_key) {
      throw new CustomError({ code: "dodopay_request_missing_data", message: "Signing Key Is Missing!" });
    }
    if (!headers["webhook-id"] || !headers["webhook-signature"] || !headers["webhook-timestamp"]) {
      throw new CustomError({ code: "dodopay_webhook_missing_headers", message: "Missing key headers in the request!" });
    }
    let stringifiedBody, parsedBody;
    if (typeof body === "string") {
      stringifiedBody = body;
      try {
        parsedBody = JSON.parse(stringifiedBody);
      } catch (err) {
        throw new Error("Failed to parse body!");
      }
    } else {
      parsedBody = body;
      try {
        stringifiedBody = JSON.stringify(parsedBody);
      } catch (err) {
        throw new Error("Failed to stringify body!");
      }
    }
    try {
      const ParsedFinalData = await this.webhook.verify(stringifiedBody, {
        "webhook-id": headers["webhook-id"],
        "webhook-signature": headers["webhook-signature"],
        "webhook-timestamp": headers["webhook-timestamp"]
      });
      return ParsedFinalData;
    } catch (e) {
      if (e.name === "WebhookVerificationError") {
        throw new CustomError({ code: "dodopay_invalid_signature", message: "Invalid signature!" });
      } else {
        throw e;
      }
    }
  }
};
export {
  DodopaymentsHandler
};
