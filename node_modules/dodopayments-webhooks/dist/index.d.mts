import { Webhook } from 'standardwebhooks';

/**
 * Webhook payload sent when a dispute is created or updated.
 */
type DisputeWebhook = {
    /**
     * The amount involved in the dispute, represented as a string to accommodate precision.
     */
    amount: string;
    /**
     * The unique identifier of the business involved in the dispute.
     */
    business_id: string;
    /**
     * The timestamp of when the dispute was created, in UTC (ISO 8601 format).
     */
    created_at: string;
    /**
     * The currency of the disputed amount, represented as an ISO 4217 currency code.
     */
    currency: string;
    /**
     * The unique identifier of the dispute.
     */
    dispute_id: string;
    /**
     * The current stage of the dispute process.
     * One of: "pre_dispute", "dispute", "pre_arbitration".
     */
    dispute_stage: "pre_dispute" | "dispute" | "pre_arbitration";
    /**
     * The current status of the dispute.
     * One of:
     * - "dispute_opened"
     * - "dispute_expired"
     * - "dispute_accepted"
     * - "dispute_cancelled"
     * - "dispute_challenged"
     * - "dispute_won"
     * - "dispute_lost"
     */
    dispute_status: "dispute_opened" | "dispute_expired" | "dispute_accepted" | "dispute_cancelled" | "dispute_challenged" | "dispute_won" | "dispute_lost";
    /**
     * The unique identifier of the payment associated with the dispute.
     */
    payment_id: string;
    /**
     * Optional remarks or additional context related to the dispute.
     */
    remarks?: string;
};

/**
 * Webhook payload sent when a license key is created or updated.
 */
type LicenceWebhook = {
    /**
     * The maximum number of activations allowed for this license key.
     * Example: 5
     */
    activations_limit?: number;
    /**
     * The unique identifier of the business associated with the license key.
     */
    business_id: string;
    /**
     * The timestamp indicating when the license key was created, in UTC.
     * Format: ISO 8601. Example: "2024-01-01T00:00:00Z"
     */
    created_at: string;
    /**
     * The unique identifier of the customer associated with the license key.
     * Example: "cus_123"
     */
    customer_id: string;
    /**
     * The timestamp indicating when the license key expires, in UTC.
     * Format: ISO 8601. Example: "2024-12-31T23:59:59Z"
     */
    expires_at?: string;
    /**
     * The unique identifier of the license key.
     * Example: "lic_123"
     */
    id: string;
    /**
     * The current number of instances activated for this license key.
     */
    instances_count: number;
    /**
     * The license key string.
     */
    key: string;
    /**
     * The unique identifier of the payment associated with the license key.
     */
    payment_id: string;
    /**
     * The unique identifier of the product associated with the license key.
     */
    product_id: string;
    /**
     * The current status of the license key.
     * One of: "active", "expired", "disabled"
     */
    status: "active" | "expired" | "disabled";
    /**
     * The unique identifier of the subscription associated with the license key, if any.
     */
    subscription_id?: string;
};

type countries = "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "CV" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CD" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KP" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MK" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SZ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "US" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW";

type currencies = "AED" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BWP" | "BYN" | "BZD" | "CAD" | "CHF" | "CLP" | "CNY" | "COP" | "CRC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "INR" | "IQD" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SEK" | "SGD" | "SHP" | "SLE" | "SLL" | "SOS" | "SRD" | "SSP" | "STN" | "SVC" | "SZL" | "THB" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VES" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XOF" | "XPF" | "YER" | "ZAR" | "ZMW";

/**
 * Webhook payload structure for a payment event.
 */
type PaymentWebhook = {
    /**
     * Billing address details for payments.
     */
    billing: {
        city: string;
        country: string;
        state: string;
        street: string;
        zipcode: string;
    };
    /** Brand ID this payment belongs to. */
    brand_id: string;
    /** Identifier of the business associated with the payment. */
    business_id: string;
    /** ISO2 country code of the card. */
    card_issuing_country?: countries;
    /** Last four digits of the card. */
    card_last_four?: string;
    /** Card network like VISA, MASTERCARD etc. */
    card_network?: string;
    /** Type of card (e.g. DEBIT or CREDIT). */
    card_type?: string;
    /** If payment is made using a checkout session, this field is set to the id of the session. */
    checkout_session_id?: string;
    /** Timestamp when the payment was created (ISO 8601). */
    created_at: string;
    /** Currency used for the payment (ISO 4217). */
    currency: currencies;
    /**
     * Details about the customer who made the payment.
     */
    customer: {
        customer_id: string;
        email: string;
        name: string;
    };
    /** Whether digital products were delivered. */
    digital_products_delivered: boolean;
    /** Discount ID if a discount is applied. */
    discount_id?: string;
    /**
     * List of disputes associated with this payment.
     */
    disputes: {
        amount: string;
        business_id: string;
        created_at: string;
        currency: string;
        dispute_id: string;
        dispute_stage: "pre_dispute" | "dispute" | "pre_arbitration";
        dispute_status: "dispute_opened" | "dispute_expired" | "dispute_accepted" | "dispute_cancelled" | "dispute_challenged" | "dispute_won" | "dispute_lost";
        payment_id: string;
        remarks: string;
    }[];
    /** Error code if the payment failed. */
    error_code?: string;
    /** Error message if the payment failed. */
    error_message?: string;
    /** Custom key-value metadata related to the payment. */
    metadata: {
        [key: string]: string;
    };
    /** Unique identifier for the payment. */
    payment_id: string;
    /** Checkout URL for the payment. */
    payment_link?: string;
    /** Payment method used (e.g. "card", "bank_transfer"). */
    payment_method?: string;
    /** Specific type of payment method (e.g. "visa", "mastercard"). */
    payment_method_type?: string;
    /**
     * List of products purchased in a one-time payment.
     */
    product_cart: [
        {
            product_id: string;
            quantity: number;
        }
    ];
    /**
     * List of refunds issued for this payment.
     */
    refunds: {
        amount?: number;
        business_id: string;
        created_at: string;
        currency?: currencies;
        is_partial: true;
        payment_id: string;
        reason?: string;
        refund_id: string;
        status: "succeeded" | "failed" | "pending" | "review";
    }[];
    /**
     * The amount that will be credited to your Dodo balance
     * after currency conversion and processing.
     */
    settlement_amount: number;
    /**
     * The currency in which settlement_amount will be credited.
     */
    settlement_currency: currencies;
    /**
     * Portion of settlement amount that corresponds to taxes collected.
     */
    settlement_tax?: number;
    /** Current status of the payment intent. */
    status?: "succeeded" | "failed" | "cancelled" | "processing" | "requires_customer_action" | "requires_merchant_action" | "requires_payment_method" | "requires_confirmation" | "requires_capture" | "partially_captured" | "partially_captured_and_capturable";
    /** Subscription ID if payment is part of a subscription. */
    subscription_id?: string;
    /** Amount of tax collected in smallest currency unit (e.g. cents). */
    tax?: number;
    /** Total amount charged to the customer including tax, in smallest currency unit. */
    total_amount: number;
    /** Timestamp when the payment was last updated (ISO 8601). */
    updated_at?: string;
};

/**
 * Webhook payload sent when a refund is created or updated.
 */
type RefundWebhook = {
    /**
     * The refunded amount in the smallest currency unit (e.g. cents).
     * Optional.
     */
    amount?: number;
    /**
     * The unique identifier of the business issuing the refund.
     */
    business_id: string;
    /**
     * The timestamp of when the refund was created in UTC (ISO 8601 format).
     */
    created_at: string;
    /**
     * The currency of the refund, represented as an ISO 4217 currency code.
     * Optional.
     */
    currency?: currencies;
    /**
     * If true, the refund is a partial refund.
     */
    is_partial: boolean;
    /**
     * The unique identifier of the payment associated with the refund.
     */
    payment_id: string;
    /**
     * The reason provided for the refund, if any.
     * Optional.
     */
    reason?: string;
    /**
     * The unique identifier of the refund.
     */
    refund_id: string;
    /**
     * The current status of the refund.
     * One of: "succeeded", "failed", "pending", "review".
     */
    status: "succeeded" | "failed" | "pending" | "review";
};

/**
 * Webhook payload representing subscription details.
 */
type SubscriptionWebhook = {
    /**
     * Addons associated with this subscription.
     */
    addons: {
        /** Identifier for the addon. */
        addon_id: string;
        /** Quantity of this addon. */
        quantity: number;
    }[];
    /**
     * Billing address details for payments.
     */
    billing: {
        city: string;
        /** Country code (ISO2) for the billing address. */
        country: countries;
        state: string;
        street: string;
        zipcode: string;
    };
    /**
     * Indicates if the subscription will cancel at the next billing date.
     */
    cancel_at_next_billing_date: boolean;
    /**
     * Timestamp when the subscription was cancelled, if applicable (ISO 8601).
     */
    cancelled_at?: string;
    /**
     * Timestamp when the subscription was created (ISO 8601).
     */
    created_at: string;
    /**
     * Currency used for the subscription payments (ISO 4217).
     */
    currency: currencies;
    /**
     * Customer details associated with the subscription.
     */
    customer: {
        /** Unique identifier of the customer. */
        customer_id: string;
        /** Customer's email address. */
        email: string;
        /** Customer's full name. */
        name: string;
    };
    /**
    * Number of remaining discount cycles if discount is applied.
    */
    discount_cycles_remaining?: number;
    /**
     * Discount ID if a discount is applied.
     */
    discount_id?: string;
    /**
     * Additional custom data associated with the subscription.
     */
    metadata: {
        [key: string]: string;
    };
    /**
     * Timestamp of the next scheduled billing (ISO 8601).
     */
    next_billing_date: string;
    /**
     * Indicates if the subscription is on-demand.
     */
    on_demand: boolean;
    /**
     * Number of payment frequency intervals.
     */
    payment_frequency_count: number;
    /**
     * Time interval for payment frequency.
     * Available values: "Day", "Week", "Month", "Year".
     */
    payment_frequency_interval: "Day" | "Week" | "Month" | "Year";
    /**
     * Timestamp of the last payment (ISO 8601).
     */
    previous_billing_date: string;
    /**
     * Identifier of the product associated with this subscription.
     */
    product_id: string;
    /**
     * Number of units/items included in the subscription.
     */
    quantity: number;
    /**
     * Amount charged before tax for each recurring payment in the smallest currency unit (e.g. cents).
     */
    recurring_pre_tax_amount: number;
    /**
     * Current status of the subscription.
     * Available values: "pending", "active", "on_hold", "paused", "cancelled", "failed", "expired".
     */
    status: "pending" | "active" | "on_hold" | "paused" | "cancelled" | "failed" | "expired";
    /**
     * Unique identifier for the subscription.
     */
    subscription_id: string;
    /**
     * Number of subscription period intervals.
     */
    subscription_period_count: number;
    /**
     * Time interval for the subscription period.
     * Available values: "Day", "Week", "Month", "Year".
     */
    subscription_period_interval: "Day" | "Week" | "Month" | "Year";
    /**
     * Indicates if the recurring_pre_tax_amount is tax inclusive.
     */
    tax_inclusive: boolean;
    /**
     * Number of days in the trial period (0 if no trial).
     */
    trial_period_days: number;
};

type HandleFunctionReturnType = {
    "type": "payment.succeeded" | "payment.failed" | "payment.processing" | "payment.cancelled";
    "data": PaymentWebhook;
} | {
    "type": "subscription.active" | "subscription.on_hold" | "subscription.renewed" | "subscription.plan_changed" | "subscription.cancelled" | "subscription.failed" | "subscription.expired";
    data: SubscriptionWebhook;
} | {
    "type": "refund.succeeded" | "refund.failed";
    data: RefundWebhook;
} | {
    "type": "dispute.opened" | "dispute.expired" | "dispute.accepted" | "dispute.cancelled" | "dispute.challenged" | "dispute.won" | "dispute.lost";
    data: DisputeWebhook;
} | {
    "type": "license_key.created";
    data: LicenceWebhook;
};

declare class DodopaymentsHandler {
    signing_key: string;
    webhook: Webhook;
    constructor(e: {
        signing_key: string;
    });
    handle({ body, headers, }: {
        body: string | {
            [key: string | number | symbol]: any;
        };
        headers: {
            "webhook-id"?: string;
            "webhook-signature"?: string;
            "webhook-timestamp"?: string;
            [key: string | number | symbol]: any;
        };
    }): Promise<HandleFunctionReturnType>;
}

export { DodopaymentsHandler };
